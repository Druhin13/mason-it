/**
 * @file Mason-it - CSS Grid to Masonry Layout Converter
 * @author Druhin13
 * @version 1.0.0
 * @license MIT
 * @description A lightweight, dependency-free library that transforms CSS Grid into Masonry layout
 * @copyright 2025 Druhin13
 */
/*!
 * Mason-it v1.0.0
 * ┌─┐┌─┐┌─┐┌─┐┌┐┌   ┬┌┬┐
 * │││├─┤└─┐│ ││││───│ │
 * └┴┘┴ ┴└─┘└─┘┘└┘   ┴ ┴
 *
 * CSS grid to masonry layout converter
 * Lightweight, dependency-free, and blazing fast!
 *
 * Copyright (c) 2025 Druhin13
 * https://github.com/Druhin13/mason-it
 * Released under the MIT License
 *
 */
!function(){if("function"==typeof window.getComputedStyle&&"function"==typeof window.requestAnimationFrame){var e="┌───┐\n│o‿o│\n└───┘",t="[■o‿o■]",n=new Map,o=!1,r="1.0.0";window.MasonIt={init:function(e,t){a("📌 init() called with",e,t);var n=f(e);a("Found",n.length,"elements to Mason-it");for(var o=0;o<n.length;o++)d(n[o],t||{});return this},refresh:function(e){if(a("🔄 refresh() called with",e||"all grids"),e)for(var t=f(e),n=0;n<t.length;n++)l(t[n]);else u();return this},reload:function(e){return a("⚠️ reload() is deprecated, please use refresh() instead"),this.refresh(e)},destroy:function(e){if(a("❌ destroy() called with",e||"all grids"),e)for(var t=f(e),o=0;o<t.length;o++)c(t[o]);else n.forEach((function(e,t){c(t)}));return this},debug:function(t){return o=!!t,console.log("\n"+e+"\n\nMason says: Debug mode "+(o?"enabled 🔍":"disabled 🔒")),this},version:function(){return r},count:function(){return n.size}},document.addEventListener("DOMContentLoaded",(function(){try{a("Auto-setting up all grids with [data-mason-it]");var e=document.querySelectorAll("[data-mason-it]:not([data-mason-it-active='true'])");a("Found",e.length,"grids to Mason-it");for(var t=0;t<e.length;t++)d(e[t],{})}catch(e){s("auto-setup",e)}}));var i=!1;window.addEventListener("resize",(function(){i||(i=!0,window.requestAnimationFrame((function(){a("🔄 Window resize detected - refreshing all Mason-it grids"),u(),i=!1})))})),window.addEventListener("refresh:mason-it",(function(){a("🔄 Custom refresh event received"),u()})),window.addEventListener("reload:mason-it",(function(){a("⚠️ 'reload:mason-it' event is deprecated, please use 'refresh:mason-it' instead"),u()})),"undefined"!=typeof module&&module.exports?module.exports=window.MasonIt:"function"==typeof define&&define.amd&&define([],(function(){return window.MasonIt})),console.log(e+"\n\nMason-it v"+r+" initialized!\nMade with ❤️ by Druhin13\n")}else console.warn("┌───┐\n│o‿o│ Mason-it: Your browser lacks required modern features. Mason-it disabled.\n└───┘");function a(){if(o&&console&&console.log){var e=[t+" Mason:"].concat(Array.prototype.slice.call(arguments));console.log.apply(console,e)}}function s(e,n){o&&console&&console.error&&console.error(t+" Mason Error ["+e+"]:",n)}function l(e){try{a("Arranging masonry layout for",e);var t=parseFloat(getComputedStyle(e).gap)||0,n=Array.prototype.filter.call(e.children,(function(e){return 1===e.nodeType&&"TEMPLATE"!==e.tagName})),o=getComputedStyle(e).gridTemplateColumns.split(" ").length;if(n.forEach((function(e){e.style.removeProperty("margin-top")})),o<2)return void a("Not enough columns for masonry effect");for(var r=o;r<n.length;r++){var i=n[r],l=n[r-o],d=i.getBoundingClientRect().top-l.getBoundingClientRect().bottom;d!==t&&(i.style.marginTop="-"+(d-t)+"px")}a("Mason-it layout arranged successfully ✓")}catch(e){s("arrange",e)}}function d(e,t){try{if(n.has(e))return void a("Grid already Mason-ited, skipping",e);a("Mason-iting grid",e,"with options",t);var o=e.getAttribute("data-mason-it")||"",r=/mason-delay:\{(\d+)\}/.exec(o),i=/mason-poll-interval:\{(\d+)\}/.exec(o),d=t&&null!=t.masonDelay?t.masonDelay:r?+r[1]:0,u=t&&null!=t.masonPollInterval?t.masonPollInterval:i?+i[1]:0,c={el:e,timeout:null,interval:null,observer:null,created:(new Date).toISOString()};function f(){l(e)}d?(a("Setting initial layout delay for",d,"ms"),c.timeout=setTimeout(f,d)):f(),u&&(a("Setting poll interval for",u,"ms"),c.interval=setInterval(f,u)),"function"==typeof MutationObserver&&(a("Setting up Mason-it observer for dynamic content"),c.observer=new MutationObserver(f),c.observer.observe(e,{childList:!0})),n.set(e,c),e.setAttribute("data-mason-it-active","true")}catch(m){s("setup",m)}}function u(){try{a("Refreshing all Mason-ited grids");var e=0;n.forEach((function(t){l(t.el),e++})),a("Refreshed",e,"Mason-it grids")}catch(e){s("refresh-all",e)}}function c(e){try{var t=n.get(e);if(!t)return void a("Grid not Mason-ited, nothing to teardown",e);a("Un-Mason-iting grid",e),clearTimeout(t.timeout),clearInterval(t.interval),t.observer&&t.observer.disconnect(),l(e),n.delete(e),e.removeAttribute("data-mason-it-active"),a("Grid successfully un-Mason-ited")}catch(e){s("teardown",e)}}function f(e){try{return"string"==typeof e?document.querySelectorAll(e):e instanceof Element?[e]:NodeList.prototype.isPrototypeOf(e)||Array.isArray(e)?e:[]}catch(e){return s("find-elements",e),[]}}}();